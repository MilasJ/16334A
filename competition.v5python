{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nfrom math import pi\nleft = MotorGroup(Motor(Ports.PORT11, GearSetting.RATIO_18_1, True), Motor(Ports.PORT14, GearSetting.RATIO_18_1, True))\nright = MotorGroup(Motor(Ports.PORT12),Motor(Ports.PORT13))\ndrivetrain = DriveTrain(left, right, 4*pi,10, 8, INCHES, 3/7)\nlifterator = MotorGroup(Motor(Ports.PORT19, 0), Motor(Ports.PORT20, 0, True))\nc15 = Controller()\nmyVariable = 0\n\nneedStopLeft = False\nneedStopRight = False\nlifteratorStopped = True\n\ndef rc_auto_loop_function_controller_1():\n    global needStopLeft, needStopRight, lifteratorStopped, remote_control_code_enabled\n    while True:\n        if remote_control_code_enabled:\n            leftPos = c15.axis3.position()\n            rightPos = c15.axis2.position()\n            if -5 < leftPos < 5:\n                if needStopLeft:\n                    left.stop()\n                    needStopLeft = False\n            else:\n                needStopLeft = True\n            if -5 < rightPos < 5:\n                if needStopRight:\n                    right.stop()\n                    needStopRight = False\n            else:\n                needStopRight = True\n            if needStopLeft:\n                left.set_velocity(((leftPos/100)**3)*100, PERCENT)\n                left.spin(FORWARD)\n            if needStopRight:\n                right.set_velocity(((rightPos/100)**3)*100, PERCENT)\n                right.spin(FORWARD)\n            if c15.buttonR1.pressing() or c15.buttonR2.pressing():\n                lifterator.spin(FORWARD)\n                lifteratorStopped = False\n            elif c15.buttonL1.pressing() or c15.buttonL2.pressing():\n                lifterator.spin(REVERSE)\n                lifteratorStopped = False\n            elif not lifteratorStopped:\n                lifterator.stop()\n                lifteratorStopped = True\n        wait(20,MSEC)\nremote_control_code_enabled = True\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\ndef when_started1():\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    lifterator.set_max_torque(100, PERCENT)\n    lifterator.set_stopping(HOLD)\ndef autonomousTasks():\n    lifterator.spin(FORWARD)\n    drivetrain.drive(FORWARD)\n    wait(1.5,SECONDS)\n    drivetrain.stop()\ndef driverTasks():\n    pass\n\ndef autonomousFunction():\n    auton_task_0 = Thread(autonomousTasks)\n    while(competition.is_autonomous() and competition.is_enabled()):\n        wait(10, MSEC)\n    auton_task_0.stop()\ndef driverFunction():\n    driver_control_task_0 = Thread(driverTasks)\n    while(competition.is_driver_control() and competition.is_enabled()):\n        wait(10, MSEC)\n    driver_control_task_0.stop()\n\ncompetition = Competition(driverFunction, autonomousFunction)\nwhen_started1()","textLanguage":"python","robotConfig":[],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.5","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}